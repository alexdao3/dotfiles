is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?|psql)(diff)?$'"


# tmux set-environment -g at_edge $CURRENT_DIR/scripts/at_edge.sh

# Tmux Plugins
set -g @plugin 'dalejung/tmux-select-pane-no-wrap'

set -g default-terminal "xterm-256color"

bind-key R source-file ~/.tmux.conf \; \
                   display-message "source-file done"

# #copy-paste fixes: http://evertpot.com/osx-tmux-vim-copy-paste-clipboard/
# Copy-paste integration
set-option -g default-command "reattach-to-user-namespace -l zsh"

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind -Tcopy-mode-vi v send -X begin-selection
bind -Tcopy-mode-vi y send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind -Tcopy-mode-vi Escape send -X cancel
bind -Tcopy-mode-vi V send -X rectangle-toggle
unbind -Tcopy-mode Enter
bind -Tcopy-mode Enter send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

# Bind ']' to use pbpaste
bind ] run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"


# fix for slow ESC issues
set -s escape-time 0

# start window indicies at 1
set -g base-index 1

# window naming nonsense
set-window-option -g automatic-rename on
set-window-option -g allow-rename off

# new windows carry over current working directory
bind c new-window -c '#{pane_current_path}'

# mouse mode
set-option -g mouse on

# Make tmux work like vi
set-window-option -g mode-keys vi
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Easier window swaps
bind -n C-left swap-window -t -1
bind -n C-right swap-window -t +1

# Easier window moves
bind -n m-left previous-window
bind -n m-h previous-window
bind -n m-right next-window
bind -n m-l next-window

# window resizing
bind -n S-Up resize-pane -U 5
bind -n S-Down resize-pane -D 5
bind -n S-Left resize-pane -L 10
bind -n S-Right resize-pane -R 10

# Option + number to jump to window
bind -n m-0 select-window -t 0
bind -n m-1 select-window -t 1
bind -n m-2 select-window -t 2
bind -n m-3 select-window -t 3
bind -n m-4 select-window -t 4
bind -n m-5 select-window -t 5
bind -n m-6 select-window -t 6
bind -n m-7 select-window -t 7
bind -n m-8 select-window -t 8
bind -n m-9 select-window -t 9

# Option + l to toggle between sessions
# bind -n m-l switch-client -l
bind -n m-s choose-session


# split window shortcuts, maintaing the working directory
bind | split-window -h -c '#{pane_current_path}'
bind \ split-window -h -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'
bind _ split-window -v -c '#{pane_current_path}'

bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"
bind-key -n M-c new-window -c "#{pane_current_path}"
bind-key -n M-, command-prompt -p "Rename window: " "rename-window '%%'"

# copy text like it's Vim
# bind-key -n Escape copy-mode
bind-key -n Escape if-shell "${is_vim}" "send-keys Escape" copy-mode
bind-key -n M-k copy-mode


# split window shortcuts, maintaing the working directory
bind-key -n M-\ split-window -h -c '#{pane_current_path}'
bind-key -n M-- split-window -v -c '#{pane_current_path}'

# kbds to create and delete tmux panes and windows (without confirmation)
bind-key -n M-q kill-pane


# Smart pane switching with awareness of vim splits
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"


# TODO restore for seamless vim splits as well
# bind -n C-h if-shell "$is_vim"
#   #check if vim is at edge
#     #check if tmux at edge
#        #app hop left
#        #tmux hop left
#     #vim hop left
# bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-h if-shell "${at_edge} L" "run-shell 'chunkc tiling::window --focus west'" "select-pane -L"
bind -n C-j if-shell "${at_edge} D" "run-shell 'chunkc tiling::window --focus north'" "select-pane -L"
bind -n C-k if-shell "${at_edge} U" "run-shell 'chunkc tiling::window --focus south'" "select-pane -L"
bind -n C-l if-shell "${at_edge} R" "run-shell 'chunkc tiling::window --focus east'" "select-pane -L"

run-shell "powerline-daemon -q"
source '/usr/local/lib/python3.6/site-packages/powerline/bindings/tmux/powerline.conf'

bind-key h set -g status

set-option -g status on
set-option -g status-interval 2
# set-option -g status-utf8 on
set-option -g status-justify "centre"
set-option -g status-left-length 60
set-option -g status-right-length 90
set-option -g status-left "#(~/dotfiles/tmux-powerline/powerline.sh left)"
set-option -g status-right "#(~/dotfiles/tmux-powerline/powerline.sh right)"

run '~/.tmux/plugins/tpm/tpm'
