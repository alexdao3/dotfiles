* dotfiles/.emacs.d/lisp/todo.org
The place for emacs hopes and dreams.

This file houses emacs TODOs,
and features in-progress and mvp source blocks.

It generates the init-todo.el sibling file via `M-x org-babel-tangle`
* Header
#+begin_src emacs-lisp :tangle ~/dotfiles/emacs.d/lisp/init-todo.el
;;; init-todo.el --- Emacs hopes, dreams, and WIPs.
;;; Commentary:
;;;   Generated by ./todo.org via org tangle
;;; Code:
#+end_src
* TODO helm persistent actions from helm mini/projectile
* TODO alchemist find function across umbrella apps (don't know how to find ...)
* TODO other helm sources should have colors/be fancy the way helm-mini is
* TODO credo + dialyzer errors in-line
* TODO kill ansi-terms without asking
* WISH EMUX highlight file paths in term output, enter to visit
* TODO EMUX remove session language
* TODO EMUX cycle terminal buffers
* TODO EMUX independent buffer positions
* TODO EMUX handle shackle usage in emux package
* TODO EMUX refactor to autoload functions properly/follow deps as needed
* TODO EMUX readme write up:Detail dependencies, install recommendations, usage details
* TODO EMUX create git repo, write readme, fork melpa, write + test recipe, submit pr
* WC mru buffer switching
#+begin_src emacs-lisp :tangle ~/dotfiles/emacs.d/lisp/init-todo.el
(defun wc/switch-to-mru-buffer ()
  "Switches to the most recently used buffer, including visible buffers."
  (interactive)
  (require 'cl)
  (setq current-buffer-name (buffer-name (current-buffer)))
  (setq buffer-candidates (remove-if #'(lambda (buffer) (string-match-p current-buffer-name (buffer-name buffer))) (buffer-list)))
  (wc/do-switch-to-mru-buffer buffer-candidates))



(defun wc/do-switch-to-mru-buffer (buffer-candidates)
  (setq buffer-candidate (car buffer-candidates))
  (setq rest (cdr buffer-candidates))
  (if (eq 0 (list-length buffer-candidates))
      (message "No more buffer candidates.")
    (if (wc/file-buffer-p buffer-candidate)
        (switch-to-buffer buffer-candidate)
      (wc/do-switch-to-mru-buffer rest))))


(defun wc/file-buffer-p (buffer-candidate)
  "Returns t if the buffer argument is backed by a file and is therefore presumably a code buffer."
  (let ((buff-name (buffer-name buffer-candidate))
        (buff-mode (wc/buffer-major-mode buffer-candidate)))
    (not (or (string-match-p "*" buff-name)
             (member buff-mode '(neotree-mode dired-mode))))))


(defun wc/buffer-major-mode (buffer-handle)
  "Returns a buffer's active major-mode."
  (with-current-buffer buffer-handle major-mode))
#+end_src
* It should be easier to mix writing with CLI
If I want an iex shell anywhere, C-i,C-e,C-x (or C-{iex}) should work.

    iex> IO.inspect("Hello there, you worldy-you.")

Evaluating `C-{iex} = shell("iex")` should add the relevant keybindings
to my dotfiles, perhaps by prompting me.
* Variables should always display a commented version of their definition
...by default.

The editor needs to read every line as it's finished,
and print the output to a file.
Another buffer can re-load from disk.

It's like elm's state machine,
but in your editor.
* Footer
#+begin_src emacs-lisp :tangle ~/dotfiles/emacs.d/lisp/init-todo.el
(provide 'init-todo)
;;; init-todo.el ends here
#+end_src
